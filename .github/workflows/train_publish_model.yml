name: Data-Prep - Train - Evaluate - Release

on:
  push:
    branches:
      - main
      - '**'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  pipeline:
    runs-on: ubuntu-latest
    env:
      RAW_FILE:    data/raw/a1_RestaurantReviews.tsv
      TRAIN_CSV:   data/processed/train.csv
      TEST_CSV:    data/processed/test.csv
      VEC_FILE:    artifacts/vectorizer.pkl
      MODEL_FILE:  artifacts/model.pkl
      VERSION:     ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install test/lint dependencies
        run: pip install pytest pylint coverage coverage-badge

      - name: Lint with pylint
        run: |
          pylint src/ | tee pylint.log
          SCORE=$(tail -n 2 pylint.log | grep 'Your code has been rated at' | sed -E 's/.*rated at ([0-9\.]+)\/10.*/\1/')
          echo "Pylint score: $SCORE"
          echo $SCORE > pylint_score.txt

      - name: Generate pylint badge
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          SCORE=$(cat pylint_score.txt)
          COLOR="brightgreen"
          if (( $(echo "$SCORE < 9.0" | bc -l) )); then COLOR="yellow"; fi
          if (( $(echo "$SCORE < 7.0" | bc -l) )); then COLOR="red"; fi
          echo "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"150\" height=\"20\"><rect width=\"150\" height=\"20\" fill=\"gray\"/><rect x=\"70\" width=\"80\" height=\"20\" fill=\"$COLOR\"/><text x=\"10\" y=\"14\" fill=\"white\" font-family=\"Verdana\" font-size=\"12\">pylint</text><text x=\"75\" y=\"14\" fill=\"white\" font-family=\"Verdana\" font-size=\"12\">$SCORE/10</text></svg>" > pylint.svg

      - name: Prepare data
        run: |
          python src/data_prep.py \
            --raw-out   "${{ env.RAW_FILE }}" \
            --train-out "${{ env.TRAIN_CSV }}" \
            --test-out  "${{ env.TEST_CSV }}"

      - name: Train model
        run: |
          python src/train.py \
            --data       "${{ env.TRAIN_CSV }}" \
            --vectorizer "${{ env.VEC_FILE }}" \
            --model      "${{ env.MODEL_FILE }}"

      - name: Evaluate model
        run: |
          python src/evaluate.py \
            --model      "${{ env.MODEL_FILE }}" \
            --vectorizer "${{ env.VEC_FILE }}" \
            --test-data  "${{ env.TEST_CSV }}"

      - name: Run tests with coverage
        run: |
          coverage run -m pytest
          coverage report

      - name: Generate coverage badge
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          coverage-badge -o coverage.svg -f

      - name: Commit coverage and pylint badges to badge-badges branch
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git fetch origin
          # Create a worktree for the badge branch
          git worktree add ../badge-badges badge-badges || git worktree add ../badge-badges -b badge-badges origin/badge-badges
          # Remove old badge files if they exist
          rm -f ../badge-badges/coverage.svg
          rm -f ../badge-badges/pylint.svg
          # Copy new badge files
          cp coverage.svg ../badge-badges/coverage.svg
          cp pylint.svg ../badge-badges/pylint.svg
          # Commit and push
          cd ../badge-badges
          git add coverage.svg pylint.svg
          git commit -m 'Update coverage and pylint badges [skip ci]' || echo "No changes to commit"
          git push origin badge-badges

      - name: Publish artifacts to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create or view the release
          gh release view "$VERSION" >/dev/null 2>&1 || \
            gh release create "$VERSION" --title "$VERSION" --notes \
              "Automated build for $VERSION"
          # Upload vectorizer and model
          gh release upload "$VERSION" \
            "${{ env.VEC_FILE }}" "${{ env.MODEL_FILE }}" --clobber
