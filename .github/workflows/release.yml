name: Stable Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install dvc dvc-gdrive

      - name: Install test/lint dependencies
        run: |
          pip install pytest pylint coverage coverage-badge pyyaml

      - name: Lint with pylint
        run: |
          pylint src/ | tee pylint.log
          SCORE=$(grep 'rated at' pylint.log | sed -E 's/.*rated at ([0-9\.]+)\/10.*/\1/')
          echo $SCORE > pylint_score.txt

      - name: Generate pylint badge
        if: startsWith(github.ref, 'refs/tags/')
        run: |
            SCORE=$(cat pylint_score.txt)
            COLOR="brightgreen"
            if (( $(echo "$SCORE < 9.0" | bc -l) )); then COLOR="yellow"; fi
            if (( $(echo "$SCORE < 5.0" | bc -l) )); then COLOR="red"; fi
            echo "<svg xmlns='http://www.w3.org/2000/svg' width='150' height='20'>
            <rect width='150' height='20' fill='gray'/>
            <rect x='70' width='80' height='20' fill='$COLOR'/>
            <text x='10' y='14' fill='white' font-family='Verdana' font-size='12'>Pylint</text>
            <text x='75' y='14' fill='white' font-family='Verdana' font-size='12'>$SCORE</text>
            </svg>" > pylint.svg

      - name: Setup DVC
        run: |
          echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}' > service-account.json
          dvc config --local core.analytics false
          dvc config --local core.autostage true
          dvc config --local remote.myremote.url gdrive://1XeB-PlDZXOJWW89yBJ0WEbL4UZwub2I6
          dvc config --local remote.myremote.gdrive_use_service_account true
          dvc config --local remote.myremote.gdrive_service_account_json_file_path service-account.json

      - name: Pull DVC data
        run: |
          mkdir -p artifacts
          dvc pull data/raw/reviews.tsv data/processed/train.csv data/processed/test.csv || true

      - name: Run DVC pipeline
        run: dvc repro

      - name: Push DVC changes
        run: dvc push

      - name: Run tests and calculate ML Test Score
        run: |
          coverage run -m pytest
          coverage report
          python tests/calculate_ml_score.py

      - name: Generate coverage badge
        run: coverage-badge -o coverage.svg -f

      - name: Generate ML Test Score badge
        run: |
            SCORE=$(cat ml_test_score.txt)
            COLOR="brightgreen"
            if (( $(echo "$SCORE < 5.0" | bc -l) )); then COLOR="yellow"; fi
            if (( $(echo "$SCORE < 3.0" | bc -l) )); then COLOR="red"; fi
            printf "<svg xmlns='http://www.w3.org/2000/svg' width='150' height='20'>\
            <rect width='150' height='20' fill='gray'/>\
            <rect x='70' width='80' height='20' fill='%s'/>\
            <text x='10' y='14' fill='white' font-family='Verdana' font-size='12'>ML Test</text>\
            <text x='75' y='14' fill='white' font-family='Verdana' font-size='12'>%s</text>\
            </svg>" "$COLOR" "$SCORE" > ml_test_score.svg

      - name: Publish model to GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release view "$VERSION" >/dev/null 2>&1 || \
            gh release create "$VERSION" --title "$VERSION" --notes "Stable release $VERSION"
          gh release upload "$VERSION" artifacts/model.pkl artifacts/vectorizer.pkl --clobber

      - name: Bump to next pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ver="${VERSION#v}"
          IFS='.' read -r MAJ MIN PATCH <<< "$ver"
          NEXT_PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJ}.${MIN}.${NEXT_PATCH}-pre.1"

          git checkout main
          echo "$NEW_VERSION" > version.txt
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add version.txt
          git commit -m "chore: bump to $NEW_VERSION"
          git push origin main

          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
